import java.math.BigInteger;
import java.util.*;

public class SecretSharing {
    public static BigInteger lagrangeInterpolation(List<BigInteger> x, List<BigInteger> y, int k) {
        BigInteger result = BigInteger.ZERO;
        for (int i = 0; i < k; i++) {
            BigInteger term = y.get(i);
            for (int j = 0; j < k; j++) {
                if (i != j) {
                    term = term.multiply(x.get(j).negate())
                               .divide(x.get(i).subtract(x.get(j)));
                }
            }
            result = result.add(term);
        }
        return result;
    }

    public static void main(String[] args) {
        int n = 10, k = 7;
        int[] xKeys = {1,2,3,4,5,6,7,8,9,10};
        int[] bases = {6,15,15,16,8,3,3,6,12,7};
        String[] values = {
            "13444211440455345511",
            "aed7015a346d635",
            "6aeeb69631c227c",
            "e1b5e05623d881f",
            "316034514573652620673",
            "2122212201122002221120200210011020220200",
            "20120221122211000100210021102001201112121",
            "20220554335330240002224253",
            "45153788322a1255483",
            "1101613130313526312514143"
        };

        List<BigInteger> x = new ArrayList<>();
        List<BigInteger> y = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            x.add(BigInteger.valueOf(xKeys[i]));
            y.add(new BigInteger(values[i], bases[i]));
        }

        List<BigInteger> xk = x.subList(0, k);
        List<BigInteger> yk = y.subList(0, k);

        BigInteger secret = lagrangeInterpolation(xk, yk, k);
        System.out.println("Secret: " + secret);
    }
}
